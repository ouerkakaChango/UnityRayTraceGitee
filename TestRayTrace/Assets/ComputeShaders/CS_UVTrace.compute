// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Render

#include "../HLSL/UnityCommonDef.hlsl"
#include "../HLSL/RayMath.hlsl"
#include "../HLSL/BVH/BVHCommonDef.hlsl"

#include "../HLSL/SDFGame/SDFCommonSys.hlsl"
//#include "../HLSL/SDFGame/SDFGameScene1.hlsl"

int w;
int h;

//#########################################################################################################
int Inx2D(int i, int j)
{
	return i + w * j;
}
//#########################################################################################################
float3 screenLeftDownPix;
float3 eyePos;
float pixW;
float pixH;
float3 screenU;
float3 screenV;

StructuredBuffer<int> tris;
StructuredBuffer<float3> vertices;
StructuredBuffer<float3> normals;
StructuredBuffer<float2> uvs;
StructuredBuffer<BVHNode> bvh;
const int treeDepth;

float4x4 worldToLocalMatrix;

Texture2D<float4> albedoTex;

RWTexture2D<float4> Result;
Texture2D<float4> envDiffTex;
Texture2DArray envSpecTex2DArr;
Texture2D<float4> envBgTex;

//#########################################################################################################

float4 GetUVTraceColor(in Ray ray)
{
	Ray sampleRay = ray;
	sampleRay.pos = mul(worldToLocalMatrix,float4(ray.pos,1)).xyz;
	sampleRay.dir = mul(worldToLocalMatrix, float4(ray.dir, 0)).xyz;
	float4 re = 0;
	VertHitInfo info = BVHVertTraceLocalRay(sampleRay,
		treeDepth, bvh,
		tris,
		vertices,
		normals,
		uvs
	);

	if (info.bHit)
	{//Trace到Scene了，返回Mesh的颜色 
		//re = RenderSceneObj(envSpecTex2DArr, ray, minHit);
		//re *= RenderSceneSDFShadow(ray, minHit);
		
		//re = float4(info.uv, 0, 1);
		uint w, h;
		albedoTex.GetDimensions(w, h);
		re = albedoTex[float2(w,h)*info.uv];
	}
	else
	{//没Trace到，返回背景/天空盒的颜色
	
		re = float4(0.1,0.1,0.1,0);//GetEnvIrradiance_equirectangular(envBgTex, ray.dir, true);
	}
	//##############################
	//HitInfo sysHit;
	//Init(sysHit);
	//float3 sysColor;
	//RaySys(ray, sysHit, sysColor);
	//if (sysHit.bHit)
	//{
	//	re = lerp(re, float4(sysColor,0), 0.5);
	//}
	//##############################
	return re;
}

#define SSAA_num 4
[numthreads(8, 8, 1)]
void Render(uint3 id : SV_DispatchThreadID)
{
	float4 re = 0;

	int idx = id.x;
	int idy = id.y;

	//???
	//float2 uv = id.xy / float2(1024,720);
	//re = 0.5*fbm4(float3(uv*15, 0));
	//Result[id.xy] = float4(re,1);
	//return;

	int SSAA_edge = (int)sqrt(SSAA_num);
	float3 pixLeftDownPos = screenLeftDownPix + screenU * pixW * (idx-0.5) + screenV * pixH * (idy - 0.5);
	float SSAA_unitDis = 1.0f / SSAA_edge;
	float4 SSAA_colors[SSAA_num];

	for (int j = 1; j <= SSAA_edge; j++)
	{
		for (int i = 1; i <= SSAA_edge; i++)
		{
			Ray ray;
			ray.pos = pixLeftDownPos + screenU * pixW * i * SSAA_unitDis + screenV * pixH * j * SSAA_unitDis;
			ray.dir = normalize(ray.pos - eyePos);

			SSAA_colors[i-1+(j-1)* SSAA_edge] = GetUVTraceColor(ray);
		}
	}

	for (int i = 0; i < SSAA_num; i++)
	{
		re += SSAA_colors[i];
	}

	re /= (float)SSAA_num;

	Result[id.xy] = re;
}