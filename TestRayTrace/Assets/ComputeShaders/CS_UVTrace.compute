// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Render
#pragma kernel BlendToFinal
#pragma kernel ClearStart

#include "../HLSL/UnityCommonDef.hlsl"
#include "../HLSL/RayMath.hlsl"
#include "../HLSL/BVH/BVHCommonDef.hlsl"

#include "../HLSL/SDFGame/SDFCommonSys.hlsl"
//#include "../HLSL/SDFGame/SDFGameScene1.hlsl"

int w;
int h;

//#########################################################################################################
int Inx2D(int i, int j)
{
	return i + w * j;
}
//#########################################################################################################
int traceTime;
float3 screenLeftDownPix;
float3 eyePos;
float pixW;
float pixH;
float3 screenU;
float3 screenV;

StructuredBuffer<int> tris;
StructuredBuffer<float3> vertices;
StructuredBuffer<float3> normals;
StructuredBuffer<float2> uvs;
StructuredBuffer<BVHNode> bvh;
const int treeDepth;

float4x4 worldToLocalMatrix;

Texture2D<float4> albedoTex;

RWTexture2D<float4> Result;
RWTexture2D<float4> NextRayRT;
RWTexture2D<float3> posRT;
RWTexture2D<float3> dirRT;

Texture2D<float4> envDiffTex;
Texture2DArray envSpecTex2DArr;
Texture2D<float4> envBgTex;

//#########################################################################################################

float4 GetUVTraceColor(in Ray ray, uint3 id, inout float4 nextRayColor, inout float minDis)
{

	Ray sampleRay = ray;
	sampleRay.pos = mul(worldToLocalMatrix,float4(ray.pos,1)).xyz;
	sampleRay.dir = mul(worldToLocalMatrix, float4(ray.dir, 0)).xyz;
	float4 re = 0;
	VertHitInfo info = BVHVertTraceLocalRay(sampleRay,
		treeDepth, bvh,
		tris,
		vertices,
		normals,
		uvs
	);

	if (info.bHit)
	{//Trace到Scene了，返回Mesh的颜色 
		float nowDis = length(info.p - sampleRay.pos);
		if (nowDis < minDis)
		{
			minDis = nowDis;
		}

		uint w, h;
		albedoTex.GetDimensions(w, h);
		re = albedoTex[float2(w, h)*info.uv];
		//!!!
		if (re.a < 0.99)
		{
			//保存a通道为nextRay用来blendFinal的alpha
			nextRayColor += float4(1, 0, 0, saturate(1 - re.a));
		}
	}
	else
	{//没Trace到，返回背景/天空盒的颜色
	
		re = 0;// float4(0.1, 0.1, 0.1, 0);//GetEnvIrradiance_equirectangular(envBgTex, ray.dir, true);
	}
	//##############################
	//HitInfo sysHit;
	//Init(sysHit);
	//float3 sysColor;
	//RaySys(ray, sysHit, sysColor);
	//if (sysHit.bHit)
	//{
	//	re = lerp(re, float4(sysColor,0), 0.5);
	//}
	//##############################
	return re;
}

#define SSAA_num 4
[numthreads(8, 8, 1)]
void Render(uint3 id : SV_DispatchThreadID)
{
	float4 re = 0;

	int idx = id.x;
	int idy = id.y;

	//???
	//float2 uv = id.xy / float2(1024,720);
	//re = 0.5*fbm4(float3(uv*15, 0));
	//Result[id.xy] = float4(re,1);
	//return;

	//如果不允许通过，则不进行trace
	//（如果SSAA有部分不通过,则认为整个像素不通过）
	if (NextRayRT[id.xy].r <0.99f)
	{
		re = 0;
	}
	else
	{
		//因为每个SSAA的子ray是否通过，材质alpha都不一样，所以也要取平均
		float4 nextRayColor = 0;
		float minDis = MAXFLOAT;

		if (traceTime == 1)
		{
			int SSAA_edge = (int)sqrt(SSAA_num);
			float3 pixLeftDownPos = screenLeftDownPix + screenU * pixW * (idx - 0.5) + screenV * pixH * (idy - 0.5);
			float SSAA_unitDis = 1.0f / SSAA_edge;
			float4 SSAA_colors[SSAA_num];

			for (int j = 1; j <= SSAA_edge; j++)
			{
				for (int i = 1; i <= SSAA_edge; i++)
				{
					Ray ray;
					ray.pos = pixLeftDownPos + screenU * pixW * i * SSAA_unitDis + screenV * pixH * j * SSAA_unitDis;
					ray.dir = normalize(ray.pos - eyePos);

					SSAA_colors[i - 1 + (j - 1)* SSAA_edge] = GetUVTraceColor(ray, id, nextRayColor, minDis);
				}
			}

			for (int i = 0; i < SSAA_num; i++)
			{
				re += SSAA_colors[i];
			}

			re /= (float)SSAA_num;
			re *= NextRayRT[id.xy].a;	//乘以原始的系数
			nextRayColor /= (float)SSAA_num;
			
			//++ 只有穿透的ray才更新pos,dir
			//只有全部穿透，才认为穿透，并且取最短的穿透dis
			if (nextRayColor.r > 0.99)
			{
				Ray ray;
				ray.pos = pixLeftDownPos + screenU * pixW + screenV * pixH;
				ray.dir = normalize(ray.pos - eyePos);
				posRT[id.xy] = ray.pos + minDis * ray.dir;
				dirRT[id.xy] = ray.dir;
			}
		}
		else
		{
			Ray ray;
			ray.pos = posRT[id.xy];
			ray.dir = dirRT[id.xy];
			ray.pos += ray.dir*0.1f;
			re = GetUVTraceColor(ray, id, nextRayColor, minDis);
			re *= NextRayRT[id.xy].a; //乘以原始的系数
			nextRayColor = 0;
			if (nextRayColor.r > 0.99)
			{
				posRT[id.xy] = ray.pos + minDis * ray.dir;
				dirRT[id.xy] = ray.dir;
			}
		}

		NextRayRT[id.xy] = nextRayColor;
	}
	Result[id.xy] = re;
}

//################################################################################
Texture2D<float4> toBlendTex;
RWTexture2D<float4> Final;
[numthreads(8, 8, 1)]
void BlendToFinal(uint3 id : SV_DispatchThreadID)
{
	Final[id.xy] += float4(toBlendTex[id.xy].rgb * toBlendTex[id.xy].a,0);
}

[numthreads(8, 8, 1)]
void ClearStart(uint3 id : SV_DispatchThreadID)
{
	Final[id.xy] = float4(0,0,0,1);
	NextRayRT[id.xy] = float4(1, 0, 0, 1);
}