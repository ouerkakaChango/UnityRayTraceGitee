#ifndef TERRAINNOISE_HLSL
#define TERRAINNOISE_HLSL
//Auto Generated by CosFBM
float CosFBM(float2 p)
{
    float re = 0;
    re += 50 * cos(dot(float2(0.7404404, 0.6721221), 0.02 * p) + 50.4886);
    re += 25 * cos(dot(float2(-0.9807415, 0.1953104), 0.03 * p) + 29.31991);
    re += 12.5 * cos(dot(float2(0.9839798, 0.1782801), 0.045 * p) + 9.065223);
    re += 6.25 * cos(dot(float2(0.9132645, 0.4073671), 0.0675 * p) + 35.54191);
    return re;
}

float2 CosFBM_Dxy(float2 p)
{
    float2 re = 0;
    re += -sin(dot(float2(0.7404404, 0.6721221), 0.02 * p) + 50.4886) * float2(0.7404404, 0.6721221) * 1;
    re += -sin(dot(float2(-0.9807415, 0.1953104), 0.03 * p) + 29.31991) * float2(-0.9807415, 0.1953104) * 0.75;
    re += -sin(dot(float2(0.9839798, 0.1782801), 0.045 * p) + 9.065223) * float2(0.9839798, 0.1782801) * 0.5625;
    re += -sin(dot(float2(0.9132645, 0.4073671), 0.0675 * p) + 35.54191) * float2(0.9132645, 0.4073671) * 0.421875;
    return re;
}

float2 CosFBM_DisSquareGrad(float2 p, float3 target)
{
    return 2 * (p - target.xz) + 2 * (CosFBM(p) - target.y) * CosFBM_Dxy(p);
}

float3 CosFBM_NearestPoint(float3 target, int loopNum, float step)
{
    float2 p = target.xz;
    for (int i = 0; i < loopNum; i++)
    {
        p -= CosFBM_DisSquareGrad(p, target) * step;
    }
    return float3(p.x, CosFBM(p), p.y);
}

#endif