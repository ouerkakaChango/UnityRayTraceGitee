// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel SDFInit

#include "../../HLSL/CommonDef.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWStructuredBuffer<uint2> elemArr;
int start;
int end;

#define MAXSDF 100000000

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint num, stride;
	elemArr.GetDimensions(num, stride);

	bool bInShape = false;
	float sdf = Result[id.xy];
	for (uint iter = start; iter <= end; iter++)
	{
		if (eq(id.xy, elemArr[iter]))
		{
			bInShape = true;
			break;
		}
		float2 p1 = float2((float)id.x, (float)id.y);
		float2 p2 = float2((float)elemArr[iter].x, (float)elemArr[iter].y);
		float dis = length(p1 - p2);
		if (dis < sdf)
		{
			sdf = dis;
			bInShape = false;
		}
	}
	if (bInShape)
	{
		Result[id.xy] = float4(0,0,0,1);
	}
	else
	{
		Result[id.xy] = float4(sdf,0,0,1);
	}
}


[numthreads(8, 8, 1)]
void SDFInit(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = float4(MAXSDF, 0, 0, 1);
}
