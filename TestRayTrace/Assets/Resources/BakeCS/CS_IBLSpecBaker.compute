// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Bake

#include "../../HLSL/RayMath.hlsl" 
#include "../../HLSL/Scenes/IBLSceneInfo.hlsl"
#include "../../HLSL/Random/RandUtility.hlsl"
#include "../../HLSL/PBR/PBR_GGX.hlsl"

int w;
int h;

//#########################################################################################################
int Inx2D(int i, int j)
{
	return i + w * j;
}

float2 Inx_img(int i, int j)
{
	//return float2(i + blockX * cw, j + blockY * ch);
	return i + w * j;
}
//#########################################################################################################
RWTexture2D<float4> outRT;
Texture2D<float4> envRefTex;
uint SPP;
float bakeRough;
int gammaMode;
//#########################################################################################################
float EquirectangularArea(float width, float height)
{
	//!!! 椭球表面积用黎曼积分不能准确（需要用椭圆积分）
	//但这里先用普通积分近似：4π(abc)^(2/3)
	//a=b=r1 from width
	//c=r2 from height

	//w是整圆周长,h是半圆周长
	float r1 = width / PI * 0.5f;
	float r2 = height * 2 / PI * 0.5f;
	return 4 * PI* pow(r1*r1*r2, 2 / 3.0f);
}

//因为资源的h=w/2，所以实际上就是正圆了
//4*PI*r*r
float EquirectangularArea(float width)
{
	float r = width / PI * 0.5f;
	return 4 * PI*r*r;
}

[numthreads(8, 8, 1)]
void Bake(uint3 id : SV_DispatchThreadID)
{
	float i = id.x;
	float j = id.y;

	float3 re = 0;

	float2 uv = float2(i / w, j / h);

	float3 N = UVToEquirectangular(uv);
	//re = GetEnvIrradiance_equirectangular(envRefTex, N, false);

	//https://learnopengl-cn.github.io/07%20PBR/03%20IBL/02%20Specular%20IBL/
	float3 V = N;
	float totalWeight = 0;
	float equirectangularArea = EquirectangularArea(w);
	for (int i1 = 0; i1 < (int)SPP; i1++)
	{
		float2 Xi = Hammersley(i1, SPP);
		float3 H = IS_SampleSpecularH(N, bakeRough, Xi.x, Xi.y);
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(dot(N, L), 0.0);
		float NdotH = max(dot(N, H), 0.0);
		float HdotV = max(dot(H, V), 0.0);
		if (NdotL > 0.0)
		{
			float D = DistributionGGX(N, H, bakeRough);
			float pdf = (D * NdotH / (4.0 * HdotV)) + 0.0001;

			//float resolution = 512.0; // resolution of source cubemap (per face)
			//float saTexel = 4.0 * PI / (6.0 * resolution * resolution);
			float saTexel = 4.0 * PI / equirectangularArea;
			float saSample = 1.0 / (float(SPP) * pdf + 0.0001);

			float mipLevel = bakeRough == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

			re += GetEnvIrradiance_equirectangular(envRefTex, L, mipLevel, false) * NdotL;
			totalWeight += NdotL;
		}
	}
	re /= totalWeight;

	if (gammaMode == 1)
	{

	}
	else
	{
		re = pow(abs(re), 2.2);
	}
	outRT[id.xy] = float4(re, 1);
}