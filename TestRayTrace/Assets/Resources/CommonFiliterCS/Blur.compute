// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BoxBlur
#pragma kernel MedianFiliter

#include "../../HLSL/CommonDef.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> TexA4;

float filterSize;
float resultScale;
//https://lettier.github.io/3d-game-shaders-for-beginners/blur.html#box-blur
[numthreads(8, 8, 1)]
void BoxBlur(uint3 id : SV_DispatchThreadID)
{
	float step = 1.0f;
	float size = filterSize;
	float3 sum = 0;
	for (int j = -size; j <= size; j++)
	{
		for (int i = -size; i <= size; i++)
		{
			sum += TexA4[id.xy + float2(i, j)*step].rgb;
		}
	}
	sum /= (size * 2 + 1)*(size * 2 + 1);
	Result[id.xy] = float4(resultScale * sum, 1);
}

[numthreads(8, 8, 1)]
void MedianFiliter(uint3 id : SV_DispatchThreadID)
{
	float step = 1.0f;
	float size = filterSize;
	float3 sum = 0;
	float record[9];
	int inx[9] = {0,1,2,3,4,5,6,7,8};
	float3 cols[9];

	for (int j = -size; j <= size; j++)
	{
		for (int i = -size; i <= size; i++)
		{
			int idx = i + size + (j + size)*(2 * size + 1);
			cols[idx] = TexA4[id.xy + float2(i, j)*step].rgb;
			record[idx] = dot(cols[idx], float3(0.3, 0.6, 0.1));
		}
	}

	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < 9; j++)
		{
			if (record[j] < record[i])
			{
				float t = record[j];
				record[j] = record[i];
				record[i] = t;

				int k = inx[j];
				inx[j] = inx[i];
				inx[i] = k;
			}
		}
	}

	Result[id.xy] = float4(cols[inx[4]], 1);
}
