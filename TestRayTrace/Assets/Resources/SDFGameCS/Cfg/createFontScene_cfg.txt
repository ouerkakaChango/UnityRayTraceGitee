valMaps:
//@@@SDFBakerMgr ValMaps
ObjNum 3
//@@@
TraceThre 0.001
NormalEpsilon 0.001

Blocks:

###BLOCK ExtraInclude
#include "../../../HLSL/Spline/SplineCommonDef.hlsl"
#include "../../../HLSL/Noise/WoodNoise.hlsl"
#include "../../../HLSL/Noise/TerrainNoise.hlsl"
#include "../../../HLSL/UV/UVCommonDef.hlsl"
#include "../../../HLSL/TransferMath/TransferMath.hlsl"
#include "../../../HLSL/Random/RandUtility.hlsl"
#include "../../../HLSL/Transform/TransformCommonDef.hlsl" 
#include "../../../HLSL/SDFGame/SDFCommonDef.hlsl"
#include "../../../HLSL/SDFGame/SDFGridObjects.hlsl"
#include "../../../HLSL/Spline/QuadBezier/QuadBezier.hlsl"
#include "../../SDFGamePrefab/font_prefab.hlsl"

//Texture2D<float4> SphereSDFTex;
//SamplerState sdf_linear_repeat_sampler;
//@@@SDFBakerMgr TexSys
Texture3D<float> fbm4_3D;
Texture3D<float> HalfSphereTex3D;
Texture3D<float3> HalfSphereNorm3D;
//@@@

float fbm4_v2(float3 p)
{
	return fbm4_3D.SampleLevel(common_linear_repeat_sampler, p, 0).r;
}
###BLOCK

###BLOCK ObjMaterial
	//@@@SDFBakerMgr ObjMaterial
if(obj == 0 )
{
re.albedo = float3(1, 0, 0);
re.metallic = 0;
re.roughness = 1;
re.reflective = 0;
re.reflect_ST = float2(1, 0);
}
else if (obj == 1 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
re.reflective = 0;
re.reflect_ST = float2(1, 0);
}
else if (obj == 2 )
{
re.albedo = float3(1, 0, 0);
re.metallic = 0;
re.roughness = 1;
re.reflective = 0;
re.reflect_ST = float2(1, 0);
}
	//@@@
###BLOCK

###BLOCK ObjRenderMode
//@@@SDFBakerMgr ObjRenderMode
int renderMode[3];
renderMode[0] = 0;
renderMode[1] = 0;
renderMode[2] = 0;
return renderMode[obj];
//@@@
###BLOCK

###BLOCK  ObjPreRender
int inx = minHit.obj;
//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
else if (inx == 1 )
{
inx = -5;
}
else if (inx == 2 )
{
}
//@@@
if(inx == -1)
{
	float2 pos = minHit.P.xz;
	int2 grid = floor(pos);
	if(abs(grid.x%2) == abs(grid.y%2))
	{
		mat.albedo *= 0.5;
	}
}
###BLOCK

###BLOCK ObjRender
//@@@SDFBakerMgr ObjRender
if(mode==0)
{
  float3 lightDirs[1];
  float3 lightColors[1];
  lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
  lightColors[0] = float3(1, 0.9568627, 0.8392157);
  result.rgb = 0.03 * mat.albedo * mat.ao;
  for(int i=0;i<1;i++)
  {
      result.rgb += PBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
//@@@
else if (mode == 1)
{
	result = PBR_IBL(envSpecTex2DArr, mat, minHit.N, -ray.dir);
}
else if (mode == 3)
{
	float3 lightPos = float3(0,4,0);
	float3 lightColor = float3(1,1,1);
	float3 l = normalize(lightPos - minHit.P);
	result = PBR_GGX(mat, minHit.N, -ray.dir, l, lightColor);
}
else if (mode == 4)
{
	result = mat.albedo;
}
###BLOCK

###BLOCK  ObjPostRender
//result = result / (result + 1.0);
//result = pow(result, 1/2.2); 
###BLOCK

###BLOCK SDFShadow
sha = saturate(0.2 + sha);
return sha;
###BLOCK

###BLOCK ExtraSDF
//void SDFPrefab_ASCII_65(inout float re, in float3 p)
//{
//	float d = re;
//	float height = 0.1;
//	float sizeU = 0.1;
//	float sizeV1 = 0.6;
//	float sizeV2 = 0.3;
//	float footDisToCenter = 0.12;
//	float shearStrength = 0.4;
//	float disToCenter1 = 0.1f;
//	float a1 =  SDFShearZBoxTransform(p, float3(sizeU*0.5, height, sizeV1*0.5),
//	shearStrength, 0,
//	float3(0.5 - footDisToCenter, height, 0.5));
//
//	float a2 =  SDFShearZBoxTransform(p, float3(sizeU*0.5, height, sizeV1*0.5),
//	-shearStrength, 0,
//	float3(0.5 + footDisToCenter, height, 0.5));
//
//	float a3 = SDFBox(p, float3(0.5, height, 0.5 - disToCenter1), float3(sizeV2*0.5, height, sizeU*0.5)); 
//
//	d = min(a1,a2);
//	d = min(d,a3);
//
//	re = min(re,d);
//}
###BLOCK

###BLOCK ObjSDF
float re = MaxSDF; //Make sure default is an invalid SDF

//if(inx == 3)
//{
//	//1.check p is is the boundingBox
//	//2.if not ,just 'return re'
//	//3.if in, do nothing,wait for following calculating SDF
//	float3 center  = float3(1.5,0,0.5);
//	float3 bound = float3(0.5,0.5,0.5);
//	float scale = 20;
//	if(!IsInBBox(p,center - scale*bound,center+scale*bound))
//	{
//		return re;
//	}
//}

//@@@SDFBakerMgr BeforeObjSDF
//@@@
//___
//@@@SDFBakerMgr ObjSDF
if(inx == 0 )
{
re = min(re, 0 + SDFBox(p, float3(0, 0, 0), float3(0.05, 0.05, 0.05), float3(0, 0, 0)));
}
else if (inx == 1 )
{
inx = -5;
}
else if (inx == 2 )
{
re = min(re, 0 + SDFBox(p, float3(1, 0, 1), float3(0.05, 0.05, 0.05), float3(0, 0, 0)));
}
//@@@
if(inx == -1)
{
	if(abs(p.x-eyePos.x)<300 && abs(p.z - eyePos.z)<300)
	{
		float d = abs(p.y);
		re = min(re,d);
	}
}
if(inx == -2)
{
	//idea:(us .cs to implement)
	//1.when a 'special' need to be Baked as a SDFPrefab
	//2.make sure autoCS has compiled, find ###BLOCK ObjSDF block where 'inx == specialID'
	//3.expcet comments, make sure only has one line code, find the funcName(SDFPrefab_ASCII_65),copy its source to SDFPrefabBaker,
	//make sure func params are in standard form
	//SDFPrefab_ASCII_65(re,p);
}
if(inx == -3)
{
	//float3 scale = 0.9;//float3(0.8,0.8,0.8);
	//float3 localp = WorldToLocal(p,float3(1,0,0),float3(0,30,30),scale);
	//float hBound = 0.1*scale.x;
	//float dh = abs(localp.y*scale.x) - hBound;
	//dh = dh>0 ? dh:0;
	//
	//float d = re;
	//float d2d = re;
	//float2 picBound = float2(0.5,0.5) * scale.x;
	//float2 p2d = localp.xz* scale.x;
	//if(gtor(abs(p2d),picBound))
	//{
	//	//not hit,than the sdf is sdfBoxPic
	//	d2d = SDFBox(p2d,0,picBound)+ TraceThre*2;
	//	d = sqrt(d2d*d2d+dh*dh);
	//}
	//else
	//{
	//	float2 uv = p2d/picBound;
	//	uv = (uv+1)*0.5;
	//	uint2 picSize = GetSize(SphereSDFTex);
	//	float sdfFromPic = SphereSDFTex.SampleLevel(sdf_linear_repeat_sampler,uv,0).r;
	//	sdfFromPic /= picSize.x*0.5*sqrt(2)* scale.x;
	//	sdfFromPic *= picBound.x;
	//	d2d = sdfFromPic;
	//	d = sqrt(d2d*d2d+dh*dh);
	//	d -= 0.005;
	//}
	//re = min(re,d);
}
//if(inx == -4)
//{
//	float3 bound = 1;
//	float3 center = float3(1,0,0);
//
//	float offset = 0.05*fbm4(5*p+_Time.y);
//	re = SDFTex3D(p,center,bound,SphereTex3D,TraceThre,offset);
//}
if(inx == -5)
{
	float r = 0.5;
	float3 center = float3(0,0,0);
	r += 0.05*fbm4(5*p+1*_Time.y);
	//if(IsInBBox(p,-0.5,0.5))
	//{
	//	float h = 0.05*fbm4_v2(p+0.1*_Time.y);
	//	r += h;
	//}
	re = 0.5*SDFSphere(p,center,r);
}

return re;
###BLOCK

###BLOCK ObjNormal
//@@@SDFBakerMgr ObjNormal
if(inx == 0 )
{
}
else if (inx == 1 )
{
}
else if (inx == 2 )
{
}
//@@@

//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
else if (inx == 1 )
{
inx = -5;
}
else if (inx == 2 )
{
}
//@@@
//if(inx == -4)
//{
//	{//expensive,because sdf sample 3d texture,rather sample once baked norm --xc
//		//return GetObjSDFNormal(inx, p, traceInfo,100);
//	}
//float3 bound = 1;
//float3 center = float3(1,0,0);
//return SDFTexNorm3D(p, center, bound, SphereNorm3D);
//}
return GetObjSDFNormal(inx, p, traceInfo);
###BLOCK
