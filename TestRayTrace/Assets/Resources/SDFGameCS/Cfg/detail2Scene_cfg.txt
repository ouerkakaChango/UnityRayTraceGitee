valMaps:
//@@@SDFBakerMgr ValMaps
ObjNum 5
//@@@
TraceThre 0.0001
NormalEpsilon 0.001

Blocks:

###BLOCK ExtraInclude
#include "../../../HLSL/UV/UVCommonDef.hlsl"
#include "../../../HLSL/Random/RandUtility.hlsl"
#include "../../../HLSL/Noise/NoiseCommonDef.hlsl"
#include "../../../HLSL/Transform/TransformCommonDef.hlsl" 
#include "../../../HLSL/SDFGame/SDFCommonDef.hlsl"

float daoScale;

//@@@SDFBakerMgr TexSys
Texture2D<float3> lightmap_ground;
//@@@

//@@@SDFBakerMgr DyValSys
//@@@

void GetEnvInfoByID(int texInx, inout bool isPNGEnv, inout Texture2DArray envTexArr)
{
	//@@@SDFBakerMgr TexSys_EnvTexSettings
	//@@@
	if(texInx == 9999)
	{
		isPNGEnv = false;
		envTexArr = envSpecTex2DArr;
	}
}

void GetEnvTexArrByObj(int objInx, inout bool isPNGEnv, inout Texture2DArray envTexArr)
{
	//@@@SDFBakerMgr ObjEnvTex
	//@@@
	if(objInx == 9999)
	{
		isPNGEnv = false;
		envTexArr = envSpecTex2DArr;
	}
}

float GetPntlightAttenuation(float3 pos, float3 lightPos)
{
	//return 1;
	float d = length(pos - lightPos);
	return saturate(1 / (d*d));
	//return 1 / (1 + 0.01*d + 0.005*d*d);
}

//https://iquilezles.org/articles/smin/
//float smin( float a, float b, float k=32 )
//{
//    float res = exp2( -k*a ) + exp2( -k*b );
//    return -log2( res )/k;
//}

float smin( float a, float b, float k=0.1 )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return lerp( b, a, h ) - k*h*(1.0-h);
}

//float smin( float a, float b, float k=0.1 )
//{
//    float h = max( k-abs(a-b), 0.0 )/k;
//    return min( a, b ) - h*h*k*(1.0/4.0);
//}

void dinnerTable(inout float re, in float3 p)
{
float d3 = re;
float d0 = re;
float d8 = re;
float d2 = re;
float d5 = re;
d3 = smin(d3, 0 + SDFBox(p, float3(3, 0.99, 0.7), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d0 = smin(d0, 0 + SDFBox(p, float3(-3, 0.99, 0.7), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d8 = smin(d8, 0 + SDFBox(p, float3(-3, 0.99, -2.2), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d2 = smin(d2, 0 + SDFBox(p, float3(3, 0.99, -2.2), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d5 = smin(d5, 0 + SDFBox(p, float3(0, 2.12, -0.75), float3(3.27828, 0.1262217, 1.7315), float3(0, 0, 0)));
re = smin(re, d3);
re = smin(re, d0);
re = smin(re, d8);
re = smin(re, d2);
re = smin(re, d5);
}

###BLOCK

###BLOCK ExtraFuncDependOnTraceScene
void SceneRenderIndirRay(in Ray ray, out float3 re, out HitInfo minHit)
{
	re = 0;
	//---Trace
	Init(minHit);
	Indir_TraceScene(ray, minHit);
	//___Trace

	if (minHit.bHit)
	{ 
		re = RenderSceneObj(ray, minHit);
	}
}

float3 IndirPointLightRender(float3 P, float3 N, float3 lightColor,float3 lightPos)
{
	float3 Li = lightColor * GetPntlightAttenuation(P,lightPos);
	float3 L = normalize(lightPos - P);
	return Li*saturate(dot(N,L));
}

void SetCheapIndirectColor(inout float3 re, Ray ray, HitInfo minHit)
{
	Ray ray_indirect;
	ray_indirect.pos = minHit.P;
	float3 indir = 0;
	int spp = 8;
	float3 lastV = 10*minHit.P;
	lastV = abs(lastV);
	for(int i=0;i<spp;i++)
	{
		if(true)
		{
			//float2 Xi = Hammersley(i, spp);
			float2 Xi = float2(rand01(100*lastV.zyx),rand01(100*lastV));
			float theta = 2*PI*Xi.x;
			float phi = PI*(2*Xi.y-1);
			float3 randDir =  float3(
				sin(phi)*cos(theta),
				sin(phi)*sin(theta),
				cos(phi)
			);
			//lastV = normalize(lastV+randDir);
			randDir.z = abs(randDir.z);
			ray_indirect.dir = Vec2NormalHemisphere(randDir,minHit.N);
			
		}
		{
			//ray_indirect.dir = reflect(ray.dir,minHit.N);
		}
		ray_indirect.pos = minHit.P + ray_indirect.dir*TraceThre*2;
		HitInfo indirHit;
		float3 indirLightColor;
		SceneRenderIndirRay(ray_indirect, indirLightColor, indirHit);
		indir += IndirPointLightRender(minHit.P,minHit.N, indirLightColor, indirHit.P);
	}
	indir /= spp;
	//re = indir;
	re += indir;
	//re = IndirPointLightRender(minHit.P,minHit.N, 1, float3(0,2,0));
}
###BLOCK

###BLOCK ObjMaterial
//@@@SDFBakerMgr ObjMaterial
if(obj == 0 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 0.4;
}
else if (obj == 1 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 0.3;
}
else if (obj == 2 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 0.4;
}
else if (obj == 3 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
else if (obj == 4 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
//@@@
###BLOCK

###BLOCK ObjRenderMode
//@@@SDFBakerMgr ObjRenderMode
int renderMode[5];
renderMode[0] = 0;
renderMode[1] = 0;
renderMode[2] = 0;
renderMode[3] = 0;
renderMode[4] = 0;
return renderMode[obj];
//@@@
###BLOCK

###BLOCK  ObjPreRender
int inx = minHit.obj;
//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
else if (inx == 1 )
{
}
else if (inx == 2 )
{
}
else if (inx == 3 )
{
}
else if (inx == 4 )
{
inx = -1;
}
//@@@

	//if(inx == 0)
	//{
	//	float2 uv = BoxedUV(minHit.P, float3(0, -0.5, 0), float3(5, 0.5, 5), float3(0, 0, 0));
	//	float3 color = lightmap_ground.SampleLevel(common_linear_clamp_sampler, uv, 0).rgb;
	//	SmoothWithDither(color,uv);
	//	mat.albedo = float4(color,1);
	//}
###BLOCK

###BLOCK ObjRender
//@@@SDFBakerMgr ObjRender
if(mode==0)
{
  float3 lightDirs[5];
  float3 lightColors[5];
  lightDirs[0] = normalize(minHit.P - float3(-0.07, 8.15, 3.42));
  lightColors[0] = float3(1, 0.9022348, 0) * GetPntlightAttenuation(minHit.P, float3(-0.07, 8.15, 3.42));
  lightDirs[1] = normalize(minHit.P - float3(0, 0.75, 0));
  lightColors[1] = float3(1, 1, 1) * GetPntlightAttenuation(minHit.P, float3(0, 0.75, 0));
  lightDirs[2] = normalize(minHit.P - float3(0.04, 8.15, -3.29));
  lightColors[2] = float3(1, 0.9022348, 0) * GetPntlightAttenuation(minHit.P, float3(0.04, 8.15, -3.29));
  lightDirs[3] = normalize(minHit.P - float3(3.357384, 8.15, 0));
  lightColors[3] = float3(1, 0.9022348, 0) * GetPntlightAttenuation(minHit.P, float3(3.357384, 8.15, 0));
  lightDirs[4] = normalize(minHit.P - float3(-3.83, 8.15, 0));
  lightColors[4] = float3(1, 0.9022348, 0) * GetPntlightAttenuation(minHit.P, float3(-3.83, 8.15, 0));
  result = 0 * mat.albedo * mat.ao;
  for(int i=0;i<5;i++)
  {
      result += PBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
//@@@
else if (mode == 1)
{
	result = PBR_IBL(envSpecTex2DArr, mat, minHit.N, -ray.dir);
}
else if (mode == 2)
{
	//object reflection IBL
	bool isPNGEnv=false;
	Texture2DArray tempEnv;
	GetEnvTexArrByObj(minHit.obj, isPNGEnv, tempEnv);
	if(isPNGEnv)
	{
		result = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir,1,1,true,true);
	}
	else
	{
		result = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir);
	}
}
else if (mode == 3)
{
	//lightmap mode
	result = mat.albedo;
	//result = pow(result,2.2);
	//result = pow(result,2.2);
}
else if (mode == 333)
{
	float3 lightPos = float3(0,4,0);
	float3 lightColor = float3(1,1,1);
	float3 l = normalize(lightPos - minHit.P);
	result = PBR_GGX(mat, minHit.N, -ray.dir, l, lightColor);
}
else
{
	result = float3(1,0,1);
}
###BLOCK

###BLOCK  ObjPostRender
if(camGammaMode == 1)
{
	
}
else{
	//gamma
	//result = result / (result + 1.0);
	//result = pow(result, 1/2.2); 
}
###BLOCK

###BLOCK IndirectColor
	//SetCheapIndirectColor(re, ray, minHit);
###BLOCK

###BLOCK SDFShadow
if(false)
{
//@@@SDFBakerMgr DirShadow
float3 lightDirs[5];
lightDirs[0] = normalize(minHit.P - float3(-0.07, 8.15, 3.42));
lightDirs[1] = normalize(minHit.P - float3(0, 0.75, 0));
lightDirs[2] = normalize(minHit.P - float3(0.04, 8.15, -3.29));
lightDirs[3] = normalize(minHit.P - float3(3.357384, 8.15, 0));
lightDirs[4] = normalize(minHit.P - float3(-3.83, 8.15, 0));
for(int i=0;i<5;i++)
{
	sha *= GetDirHardShadow(ray, lightDirs[i], minHit);
}
//@@@
}
sha = saturate(0.2 + sha);
return sha;
###BLOCK

###BLOCK ExtraSDF
float SDFFoTou(float3 p)
{
	float re = 0;
	float r = 10.45 + 0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float3 center = float3(0, 0.5, 0);
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}
float SDFPlanet(float3 p)
{
	float re = 0;
	float r = 0.48;// +0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float dis = fbm4(p.zxy*10);
	r += 0.02*smoothstep(0.5f, 1.0f, dis);
	float3 center = float3(0, r, 0);
	 
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}
###BLOCK

###BLOCK ObjSDF
//### 
float re = MaxTraceDis + 1; //Make sure default is an invalid SDF
//@@@SDFBakerMgr BeforeObjSDF
//@@@
//@@@SDFBakerMgr ObjSDF
if(inx == 0 )
{
re = min(re, 0 + SDFBox(p, float3(0, 9.55, 0), float3(5, 0.5, 5), float3(0, 0, 0)));
}
else if (inx == 1 )
{
re = min(re, 0 + SDFBox(p, float3(0, -0.5, 0), float3(5, 0.5, 5), float3(0, 0, 0)));
}
else if (inx == 2 )
{
re = min(re, 0 + SDFBox(p, float3(0, 3.98, 5), float3(5, 0.5000001, 5.000001), float3(90, 0, 0)));
}
else if (inx == 3 )
{
re = min(re, 0 + SDFBox(p, float3(-6.25, 1.04, 2.59), float3(0.5, 0.5, 0.5), float3(0, 0, 0)));
}
else if (inx == 4 )
{
inx = -1;
}
//@@@

if(inx == -1)
{
//???
float d = MaxSDF;
dinnerTable(d,p);
//d-=0.2;
re = min(re,d);
}

return re;
###BLOCK

###BLOCK BeforeObjSDFNormal
	//normalEpsilon *= daoScale;
###BLOCK

###BLOCK ObjNormal
//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
else if (inx == 1 )
{
}
else if (inx == 2 )
{
}
else if (inx == 3 )
{
}
else if (inx == 4 )
{
inx = -1;
}
//@@@
	return GetObjSDFNormal(inx, p, traceInfo);
###BLOCK

###BLOCK BeforeTraceScene
	//traceThre *= daoScale;
###BLOCK

###BLOCK CheckInnerBound
//@@@SDFBakerMgr CheckInnerBound
//@@@
###BLOCK

###BLOCK CheckInnerBound2
//@@@SDFBakerMgr CheckInnerBound
//@@@
###
