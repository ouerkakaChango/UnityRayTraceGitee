valMaps:
//@@@SDFBakerMgr ValMaps
ObjNum 1
//@@@
TraceThre 0.001
NormalEpsilon 0.001

Blocks:

###BLOCK ExtraInclude
#include "../../../HLSL/Random/RandUtility.hlsl"
#include "../../../HLSL/Noise/NoiseCommonDef.hlsl"
#include "../../../HLSL/Transform/TransformCommonDef.hlsl" 
#include "../../../HLSL/SDFGame/SDFCommonDef.hlsl"
#include "../../../HLSL/MatLib/CommonMatLib.hlsl"

float daoScale;

//@@@SDFBakerMgr TexSys
//@@@

//@@@SDFBakerMgr DyValSys
//@@@

void GetEnvInfoByID(int texInx, inout bool isPNGEnv, inout Texture2DArray envTexArr)
{
	//@@@SDFBakerMgr TexSys_EnvTexSettings
	//@@@
	if(texInx == 9999)
	{
		isPNGEnv = false;
		envTexArr = envSpecTex2DArr;
	}
}

void GetEnvTexArrByObj(int objInx, inout bool isPNGEnv, inout Texture2DArray envTexArr)
{
	//@@@SDFBakerMgr ObjEnvTex
	//@@@
	if(objInx == 9999)
	{
		isPNGEnv = false;
		envTexArr = envSpecTex2DArr;
	}
}

float GetPntlightAttenuation(float3 pos, float3 lightPos)
{
	//return 1;
	float d = length(pos - lightPos);
	return saturate(1 / (d*d));
	//return 1 / (1 + 0.01*d + 0.005*d*d);
}

//https://iquilezles.org/articles/smin/
//float smin( float a, float b, float k=32 )
//{
//    float res = exp2( -k*a ) + exp2( -k*b );
//    return -log2( res )/k;
//}

float smin( float a, float b, float k=0.1 )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return lerp( b, a, h ) - k*h*(1.0-h);
}

//float smin( float a, float b, float k=0.1 )
//{
//    float h = max( k-abs(a-b), 0.0 )/k;
//    return min( a, b ) - h*h*k*(1.0/4.0);
//}

void dinnerTable(inout float re, in float3 p)
{
float d3 = re;
float d0 = re;
float d8 = re;
float d2 = re;
float d5 = re;
d3 = smin(d3, 0 + SDFBox(p, float3(3, 0.99, 0.7), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d0 = smin(d0, 0 + SDFBox(p, float3(-3, 0.99, 0.7), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d8 = smin(d8, 0 + SDFBox(p, float3(-3, 0.99, -2.2), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d2 = smin(d2, 0 + SDFBox(p, float3(3, 0.99, -2.2), float3(0.1663568, 1.028534, 0.1951089), float3(0, 0, 0)));
d5 = smin(d5, 0 + SDFBox(p, float3(0, 2.12, -0.75), float3(3.27828, 0.1262217, 1.7315), float3(0, 0, 0)));
re = smin(re, d3);
re = smin(re, d0);
re = smin(re, d8);
re = smin(re, d2);
re = smin(re, d5);
}

###BLOCK

###BLOCK ExtraFuncDependOnTraceScene
void SceneRenderIndirRay(in Ray ray, out float3 re, out HitInfo minHit, out Material_PBR indirSourceMat)
{
	re = 0;
	//---Trace
	Init(minHit);
	TraceScene(ray, minHit);
	//Indir_TraceScene(ray, minHit);
	//___Trace

	if (minHit.bHit)
	{ 
		re = RenderSceneObj(ray, minHit, indirSourceMat);
	}
}

float3 IndirPointLightRender(float3 P, float3 N, float3 lightColor,float3 lightPos)
{
	float3 Li = lightColor * saturate(1*GetPntlightAttenuation(P,lightPos));
	float3 L = normalize(lightPos - P);
	return Li*saturate(dot(N,L));
}

float3 Sample_MIS_H(float3 Xi, float3 N, in Material_PBR mat, float p_diffuse) {
    //float r_diffuse = (1.0 - material.metallic);
    //float r_specular = 1.0;
    //float r_sum = r_diffuse + r_specular;
	//
    //float p_diffuse = r_diffuse / r_sum;
    //float p_specular = r_specular / r_sum;

    float rd = Xi.z;

    if(rd <= p_diffuse) {
        return IS_SampleDiffuseH(N,mat.roughness,Xi.x,Xi.y);
    } 
	else
	{
		return IS_SampleSpecularH(N,mat.roughness,Xi.x,Xi.y);
	}
    return 0;
}

void SetCheapIndirectColor(inout float3 re, float3 seed, Ray ray, HitInfo minHit, Material_PBR mat)
{
	Ray ray_indirect;
	ray_indirect.pos = minHit.P;
	float3 Xi = float3(rand01(seed),rand01(seed.zxy),rand01(seed.zyx));

	float r_diffuse = saturate(1.0 - mat.metallic);
	float r_specular = saturate(1.0);
	float r_sum = r_diffuse + r_specular;
	float p_diffuse = r_diffuse / r_sum;
	float p_specular = r_specular / r_sum;

	float3 H = Sample_MIS_H(Xi, minHit.N, mat,p_diffuse);
	ray_indirect.dir = reflect(ray.dir,H);
	{
		//float3 d1 = Vec2NormalHemisphere(randDir,minHit.N);
		//float3 d2 = reflect(ray.dir,minHit.N);
		//ray_indirect.dir = lerp(d2, d1, mat.roughness);
		//ray_indirect.dir = reflect(ray.dir,minHit.N);
		//ray_indirect.dir = toNormalHemisphere(randP_hemiRound(seed), minHit.N);
	}
	//minHit.N*TraceThre*2 ensure escape from 'judging surface'
	ray_indirect.pos = minHit.P + ray_indirect.dir*TraceThre*2 + minHit.N*TraceThre*2;
	HitInfo indirHit;
	float3 indirLightColor;
	Material_PBR indirSourceMat;
	SceneRenderIndirRay(ray_indirect, indirLightColor, indirHit, indirSourceMat);
	indirLightColor *= RenderSceneSDFShadow(indirHit);
	//---
	float3 L = ray_indirect.dir;
	float m_NL = saturate(dot(minHit.N,L));
	float pdf_diffuse = m_NL / PI;

	float pdf_GGX = 0;
	float a = mat.roughness;
	a = max(0.001f, a*a);
	
	//float3 H = normalize(-ray.dir+L);
	float m_NH = saturate(dot(minHit.N, H));
	float nomi = a * a * m_NH;
	float m_NH2 = m_NH * m_NH;
	
	float denom = (m_NH2 * (a*a - 1.0) + 1.0);
	denom = PI * denom * denom;
	pdf_GGX = nomi / denom;
	pdf_GGX /= 4 * dot(L, H);	
	pdf_GGX = max(pdf_GGX, 0.001f);
	float pdf_specular = pdf_GGX;

	float pdf = p_diffuse * pdf_diffuse
				+ p_specular * pdf_specular;
	pdf = max(0.001f, pdf);
	indirLightColor /= pdf;
	if(indirSourceMat.roughness<0.5 && mat.roughness>0.2)
	{
		indirLightColor = 0;
	}
	//___

	{
		//re = IndirPointLightRender(minHit.P,minHit.N, indirLightColor, indirHit.P);
	}
	float3 Li = indirLightColor * GetPntlightAttenuation(minHit.P,indirHit.P);
	re = PBR_GGX(mat, minHit.N, -ray.dir, L, Li);
}
###BLOCK

###BLOCK ObjMaterial
//@@@SDFBakerMgr ObjMaterial
if(obj == 0 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
//@@@
###BLOCK

###BLOCK ObjRenderMode
//@@@SDFBakerMgr ObjRenderMode
int renderMode[1];
renderMode[0] = 0;
return renderMode[obj];
//@@@
###BLOCK

###BLOCK ObjUV
	float2 uv = 0;
	int inx = minHit.obj;
	//@@@SDFBakerMgr ObjUV
if(inx == 0 )
{
uv = BoxedUV(minHit.P, float3(50, 0, 50), float3(50, 0.5, 50), float3(0, 0, 0));
}
	//@@@

	//----------------------------------

	//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
	//@@@

return uv;
###BLOCK

###BLOCK ObjTB
//@@@SDFBakerMgr ObjTB
if(inx == 0 )
{
BoxedTB(T,B,minHit.P, float3(50, 0, 50), float3(50, 0.5, 50), float3(0, 0, 0));
}
//@@@
###BLOCK

###BLOCK  ObjPreRender
int inx = minHit.obj;
//@@@SDFBakerMgr ObjMatLib

//@@@

//@@@SDFBakerMgr ObjImgAttach

//@@@

//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
//@@@

###BLOCK

###BLOCK ObjRender
//@@@SDFBakerMgr ObjRender
if(mode==0)
{
  float3 lightDirs[1];
  float3 lightColors[1];
  lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
  lightColors[0] = float3(1, 1, 1);
  result = 0.003 * mat.albedo * mat.ao;
  for(int i=0;i<1;i++)
  {
      result += PBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
//@@@
else if (mode == 1)
{
	result = PBR_IBL(envSpecTex2DArr, mat, minHit.N, -ray.dir);
}
else if (mode == 2)
{
	//object reflection IBL
	bool isPNGEnv=false;
	Texture2DArray tempEnv;
	GetEnvTexArrByObj(minHit.obj, isPNGEnv, tempEnv);
	if(isPNGEnv)
	{
		result = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir,1,1,true,true);
	}
	else
	{
		result = PBR_IBL(tempEnv, mat, minHit.N, -ray.dir);
	}
}
else if (mode == 3)
{
	//lightmap mode
	result = mat.albedo;
	//result = pow(result,2.2);
	//result = pow(result,2.2);
}
else if (mode == 333)
{
	float3 lightPos = float3(0,4,0);
	float3 lightColor = float3(1,1,1);
	float3 l = normalize(lightPos - minHit.P);
	result = PBR_GGX(mat, minHit.N, -ray.dir, l, lightColor);
}
else if (mode == 1001)
{
	result = minHit.N;
}
else if(mode == 444)
{
  float3 lightDirs[6];
  float3 lightColors[6];
  lightDirs[0] = normalize(minHit.P - float3(-0.07, 8.15, 3.42));
  lightColors[0] = float3(2, 2, 2) * GetPntlightAttenuation(minHit.P, float3(-0.07, 8.15, 3.42));
  lightDirs[1] = normalize(minHit.P - float3(-1.713, 2.707, -2.17));
  lightColors[1] = float3(1.5, 1.5, 1.5) * GetPntlightAttenuation(minHit.P, float3(-1.713, 2.707, -2.17));
  lightDirs[2] = normalize(minHit.P - float3(-3.526, 2.707, -2.17));
  lightColors[2] = float3(1.5, 1.5, 1.5) * GetPntlightAttenuation(minHit.P, float3(-3.526, 2.707, -2.17));
  lightDirs[3] = normalize(minHit.P - float3(0.04, 8.15, -3.29));
  lightColors[3] = float3(2, 2, 2) * GetPntlightAttenuation(minHit.P, float3(0.04, 8.15, -3.29));
  lightDirs[4] = normalize(minHit.P - float3(3.357384, 8.15, 0));
  lightColors[4] = float3(2, 2, 2) * GetPntlightAttenuation(minHit.P, float3(3.357384, 8.15, 0));
  lightDirs[5] = normalize(minHit.P - float3(-3.83, 8.15, 0));
  lightColors[5] = float3(2, 2, 2) * GetPntlightAttenuation(minHit.P, float3(-3.83, 8.15, 0));
  result = 0 * mat.albedo * mat.ao;
  for(int i=0;i<6;i++)
  {
      result += MPBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
else
{
	result = float3(1,0,1);
}
###BLOCK

###BLOCK  ObjPostRender
if(camGammaMode == 1)
{
	
}
else{
	//gamma
	//result = result / (result + 1.0);
	//result = pow(result, 1/2.2); 
}
###BLOCK

###BLOCK IndirectColor
	SetCheapIndirectColor(re, seed, ray, minHit, mat);
###BLOCK

###BLOCK SDFShadow
if(false)
{
//@@@SDFBakerMgr DirShadow
int lightType[1];
lightType[0] = 0;
float3 lightPos[1];
lightPos[0] = float3(0, 3, 0);
float3 lightDirs[1];
lightDirs[0] = float3(-0.3213938, -0.7660444, 0.5566705);
int shadowType[1];
shadowType[0] =0;
float lightspace = 1;
float maxLength = MaxSDF;
float tsha = 1;
for (int i = 0; i < 1; i++)
{
  float maxLength = MaxSDF;
  if(lightType[i]==0)
  {
      maxLength = MaxSDF;
  }
  if(lightType[i]==1)
  {
      maxLength = length(minHit.P - lightPos[i]);
  }
  if(lightType[i]<0)
  {
      tsha = 1;
  }
  else
  {
      if(shadowType[i]==0)
      {
          tsha = GetDirHardShadow(lightDirs[i], minHit, maxLength);
      }
      if(shadowType[i]==1)
      {
          tsha = GetDirSoftShadow(lightDirs[i], minHit, maxLength);
      }
  }
  lightspace -= (1 - tsha);
}
lightspace /= 1;
sha = lightspace;
//@@@
}
return sha;
###BLOCK

###BLOCK ExtraSDF
float SDFFoTou(float3 p)
{
	float re = 0;
	float r = 10.45 + 0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float3 center = float3(0, 0.5, 0);
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}
float SDFPlanet(float3 p)
{
	float re = 0;
	float r = 0.48;// +0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float dis = fbm4(p.zxy*10);
	r += 0.02*smoothstep(0.5f, 1.0f, dis);
	float3 center = float3(0, r, 0);
	 
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}

//change from https://iquilezles.org/articles/distfunctions/
float3 opCheapBend_XY( float3 p , in float3 center, float k=10.0f)
{
	p -= center;
    float c = cos(k*p.x);
    float s = sin(k*p.x);
    float2x2  m = {c,-s,s,c};
    return float3(mul(m,p.xy),p.z)+center;
}
###BLOCK

###BLOCK ObjSDF
//### 
float re = MaxTraceDis + 1; //Make sure default is an invalid SDF
//@@@SDFBakerMgr BeforeObjSDF
//@@@
//@@@SDFBakerMgr ObjSDF
if(inx == 0 )
{
re = min(re, 0 + SDFBox(p, float3(50, 0, 50), float3(50, 0.5, 50), float3(0, 0, 0)));
}
//@@@

if(inx == -1)
{
float d = MaxSDF;
dinnerTable(d,p);
//d-=0.2;
re = min(re,d);
}
if (inx == -2)
{

float3 center = float3(-2.81200004,2.68899989,-1.22000003);
//float3 p2 = opCheapBend_XY(p,center,1);
float d = SDFBox(p,center,4*float3(0.07,0.05,0.05));
re = min(re,d);
}

return re;
###BLOCK

###BLOCK BeforeObjSDFNormal
	//normalEpsilon *= daoScale;
###BLOCK

###BLOCK ObjNormal
//@@@SDFBakerMgr SpecialObj
if(inx == 0 )
{
}
//@@@
	return GetObjSDFNormal(inx, p, traceInfo);
###BLOCK

###BLOCK BeforeTraceScene
	//traceThre *= daoScale;
###BLOCK

###BLOCK CheckInnerBound
//@@@SDFBakerMgr CheckInnerBound
//@@@
###BLOCK

###BLOCK CheckInnerBound2
//@@@SDFBakerMgr CheckInnerBound
//@@@
###
