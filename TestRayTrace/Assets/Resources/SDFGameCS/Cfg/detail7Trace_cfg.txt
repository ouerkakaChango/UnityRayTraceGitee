valMaps:
SceneName Detail7
BackGroundColor float3(1,1,1)

Blocks:

###BLOCK ExtraDef
#include "../../../HLSL/MatLib/CommonBgMat.hlsl"
//@@@SDFBakerMgr DyValSys
float fogKScale;
//@@@
###BLOCK

###BLOCK MainRender
if (minHit.bHit)
{ 
	mat = GetObjMaterial_PBR(minHit.obj);
	if(mat.reflective<0.001)
	{
	re = RenderSceneObj(ray, minHit, mat);
	}
	else if (mat.reflective<0.999)
	{
		re = lerp(RenderSceneObj(ray, minHit, mat),SceneRenderReflect(ray, minHit,mat),mat.reflective);
	}
	else
	{
	re = SceneRenderReflect(ray, minHit,mat);
	}
	re *= RenderSceneSDFShadow(minHit);
	re += RenderSceneAdditionalColor(ray, minHit, mat);
}
else
{
	//re = (@BackGroundColor);
	//re = GetEnvIrradiance_equirectangular(envBgTex, ray.dir, true);
	//re = stars(ray.pos, ray.dir);

	Ray tray = ray;
	//warp skybox a little to fit vanish line
	tray.dir = normalize(tray.dir+float3(0,0.015,0));
	re = CommonBg_WaterSky(tray, seed.xy, float2(w,h), float2(0.5,0.5*(1+sin(0.1*_Time.y))));
}

float eyeDepth = 0;
if(minHit.bHit)
{
	eyeDepth = length(minHit.P - ray.pos);
}
else
{
	eyeDepth = 300;
}
float fogK = 0.005*eyeDepth*fogKScale;
fogK = exp(-fogK*fogK);

float3 fogPos = ray.pos+ray.dir*eyeDepth;
float fogHeightK = 1-exp(-5*(fogPos.y/10.));//saturate((fogPos.y - 0)/1);

fogK = max(fogK,fogHeightK);

float3 fogColor = 0.1;
re = lerp(fogColor, re, fogK);

SmoothWithDither(re, suv);
###BLOCK

###BLOCK IndirectRender
	if(mat.reflective<0.5)
	{
	SetIndirectColor(re, seed, ray, minHit, mat);
	}

###BLOCK
