valMaps:
//@@@SDFBakerMgr ValMaps
ObjNum 7
//@@@

Blocks:

###BLOCK ExtraInclude
#include "../../HLSL/Spline/SplineCommonDef.hlsl"
#include "../../HLSL/Noise/WoodNoise.hlsl"
#include "../../HLSL/Noise/TerrainNoise.hlsl"
#include "../../HLSL/UV/UVCommonDef.hlsl"
#include "../../HLSL/TransferMath/TransferMath.hlsl"
Texture2D woodPBR_albedo;
Texture2D woodPBR_normal;
Texture2D woodPBR_metallic;
Texture2D woodPBR_roughness;
Texture2D woodPBR_ao;
###BLOCK

###BLOCK ObjMaterial
	//@@@SDFBakerMgr ObjMaterial
if(obj == 0 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 1;
re.roughness = 1;
}
else if (obj == 1 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
else if (obj == 2 )
{
re.albedo = float3(0.7254902, 0.4784314, 0.3411765);
re.metallic = 0;
re.roughness = 1;
}
else if (obj == 3 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
else if (obj == 4 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
else if (obj == 5 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 0.2;
}
else if (obj == 6 )
{
re.albedo = float3(1, 1, 1);
re.metallic = 0;
re.roughness = 1;
}
	//@@@
###BLOCK

###BLOCK ObjRenderMode
//@@@SDFBakerMgr ObjRenderMode
int renderMode[7];
renderMode[0] = 3;
renderMode[1] = 2;
renderMode[2] = 0;
renderMode[3] = 2;
renderMode[4] = 2;
renderMode[5] = 0;
renderMode[6] = 2;
return renderMode[obj];
//@@@
###BLOCK

###BLOCK  ObjPreRender
if(mode == 2)
{
	//mat.albedo *= WoodColor(5*minHit.P);
	//minHit.N += float3(100,0,0);//WoodDisplacement(minHit.P);
	//minHit.N = float3(0,0,0);//normalize(minHit.N);
	//mat.albedo = WoodDisplacement(5*minHit.P);

	float3 pos = minHit.P;
	float3 tile = float3(1,1,1);
	float woodNEpsilon = NormalEpsilon;
	float3 T = float3(1,0,0);
	float3 B = float3(0,1,0);
	float3 N = float3(0,0,1);
	
	float3 woodN = normalize(float3(
		WoodDisplacement(tile * pos + woodNEpsilon*T) - WoodDisplacement(tile * pos - woodNEpsilon*T),
		WoodDisplacement(tile * pos + woodNEpsilon*B) - WoodDisplacement(tile * pos - woodNEpsilon*B),
		WoodDisplacement(tile * pos + woodNEpsilon*N) - WoodDisplacement(tile * pos - woodNEpsilon*N)
		));

	float normalIntensity = 0.2;
	woodN = normalize(normalIntensity * woodN + minHit.N);

	mat.albedo *= WoodColor(tile*pos);
	minHit.N = woodN;

	mode = 0;
}
else if(mode == 3)
{//???
	float3 pos = minHit.P;
	float3 boxPos = float3(-55,0.6,-52);
	float3 boxBound = 0.5;
	//float3 boxPos = float3(0,2,0);
	float2 uv = BoxedUV(pos,boxPos, boxBound, float3(0, 0, 0));

	//mat.albedo = minHit.N;
	mat.albedo *= woodPBR_albedo[4096*uv].rgb;
	float3 N = minHit.N;
	float3 T,B;
	BoxedTB(T,B, pos,boxPos, boxBound, float3(0, 0, 0));
	minHit.N = NormalMapToWorld(woodPBR_normal[4096*uv].rgb*2-1,T,B,N);
	//minHit.N = NormalMapToWorld(float3(0,0,1),T,B,N);

	//mat.albedo  = woodPBR_normal[4096*uv].rgb;
	mat.metallic *= woodPBR_metallic[4096*uv].r;
	mat.roughness *= woodPBR_roughness[4096*uv].r;
	mat.ao = woodPBR_ao[4096*uv].r; 

	mode = 0;
}

//???
if(minHit.obj==2)
{
	//float2 dxy = CosFBM_Dxy(minHit.P.xz);
	//float3 N = normalize(float3(-dxy.x,1,-dxy.y));
	//mat.albedo = float3(saturate(dxy),0);
	//mat.albedo = float3(CosFBM(minHit.P.xz)>0?1:0,0,0);
}
###BLOCK

###BLOCK ObjRender
//@@@SDFBakerMgr ObjRender
if(mode==0)
{
  float3 lightDirs[1];
  float3 lightColors[1];
  lightDirs[0] = float3(0.3534208, -0.4141579, -0.8387889);
  lightColors[0] = float3(1, 1, 1);
  result = 0.03 * mat.albedo * mat.ao;
  for(int i=0;i<1;i++)
  {
      result += PBR_GGX(mat, minHit.N, -ray.dir, -lightDirs[i], lightColors[i]);
  }
}
//@@@
else if (mode == 1)
{
	result = PBR_IBL(envSpecTex2DArr, mat, minHit.N, -ray.dir);
}
else if (mode == 3)
{
	float3 lightPos = float3(0,4,0);
	float3 lightColor = float3(1,1,1);
	float3 l = normalize(lightPos - minHit.P);
	result = PBR_GGX(mat, minHit.N, -ray.dir, l, lightColor);
}
###BLOCK

###BLOCK  ObjPostRender
result = result / (result + 1.0);
result = pow(result, 1/2.2); 
###BLOCK

###BLOCK SDFShadow
if(true)
{
//@@@SDFBakerMgr DirShadow
float3 lightDirs[1];
lightDirs[0] = float3(0.3534208, -0.4141579, -0.8387889);
for(int i=0;i<1;i++)
{
	sha *= GetDirHardShadow(ray, lightDirs[i], minHit);
}
//@@@
}
sha = saturate(0.2 + sha);
return sha;
###BLOCK

###BLOCK ExtraSDF
float SDFFoTou(float3 p)
{
	float re = 0;
	float r = 10.45 + 0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float3 center = float3(0, 0.5, 0);
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}
float SDFPlanet(float3 p)
{
	float re = 0;
	float r = 0.48;// +0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
	float dis = fbm4(p.zxy*10);
	r += 0.02*smoothstep(0.5f, 1.0f, dis);
	float3 center = float3(0, r, 0);
	 
	re = length(p - center) - r;
	re *= 0.5f;
	return re;
}
###BLOCK

###BLOCK ObjSDF

	//### A
	//float a1 =  SDFShearXBoxTransform(p, float3(5, 0.5, 0.5),
	//	0, 0.3,
	//	float3(0, -0.5, -1.5));
	//
	//float a2 =  SDFShearXBoxTransform(p, float3(5, 0.5, 0.5),
	//	0, -0.3,
	//	float3(0, -0.5, 1.5));
	//
	//float a3 = SDFBox(p, float3(-1.5, -0.5, 0), float3(0.4, 0.5, 2)); 
	//
	//float re =  min(a1,a2);
	//re = min(re,a3);

	//### Spline
	//float re = 10000;
	//float2 box = float2(0.1, 0.05);
	//Transform trans;
	//Init(trans);
	//float2 spline[5];
	//spline[0] = float2(0,0);
	//spline[1] = float2(1.06,0.72);
	//spline[2] = float2(1.67,0);
	//spline[3] = float2(2.717196,-1.236034);
	//spline[4] = float2(2.89,-3);

	//float2 sp[9];
	//sp[0] = float2(2, 0.44);
	//sp[1] = float2(0, -0.1);
	//sp[2] = float2(-0.67, 0.58);
	//sp[3] = float2(-1.175332, 1.092874);
	//sp[4] = float2(-1.21, 1.54);
	//sp[5] = float2(-1.247879, 2.028534);
	//sp[6] = float2(-0.64, 2.5);
	//sp[7] = float2(0.2687165, 3.204794);
	//sp[8] = float2(2, 2.5);

	//FUNC_SDFBoxedQuadBezier(re, p, spline, 5, trans, box)
	//FUNC_SDFBoxedQuadBezier(re, p, sp, 9, trans, box)

	//### 
	float re = MaxTraceDis + 1; //Make sure default is an invalid SDF

	//@@@SDFBakerMgr ObjSDF
if(inx == 0 )
{
re = min(re, 0 + SDFBox(p, float3(-55, 0.6, -52), float3(0.5, 0.5, 0.5), float3(0, 0, 0)));
}
else if (inx == 1 )
{
re = min(re, 0 + SDFBox(p, float3(-53.40586, -0.02504057, -55.8854), float3(0.07071168, 1.511707, 0.0646275), float3(338.16, 349.3067, -2.989319E-06)));
}
else if (inx == 2 )
{
inx = -2;
}
else if (inx == 3 )
{
re = min(re, 0 + SDFBox(p, float3(-53.255, -0.1510001, -56.684), float3(0.07071169, 1.511707, 0.06462751), float3(10.90515, 349.3067, -2.608424E-06)));
}
else if (inx == 4 )
{
re = min(re, 0 + SDFBox(p, float3(-54.646, -0.1510001, -56.947), float3(0.07071169, 1.511707, 0.06462751), float3(10.90515, 349.3067, -2.608424E-06)));
}
else if (inx == 5 )
{
re = min(re, 0 + SDFBox(p, float3(-54.05, 0.35, -56.16), float3(0.745, 1.11, 0.025), float3(338.16, 349.3067, -2.989319E-06)));
}
else if (inx == 6 )
{
re = min(re, 0 + SDFBox(p, float3(-54.76603, -0.02504051, -56.14224), float3(0.07071168, 1.511707, 0.0646275), float3(338.16, 349.3067, -2.989319E-06)));
}
	//@@@
	if(inx == -1)
	{
		//float trunkBox = SDFBox(p, float3(0, 2, 0), float3(0.2, 2, 0.2), float3(0, 0, 0));
		float sbox = SDFBox(p, float3(0, 2, 0), float3(1, 1, 1), float3(0, 0, 0));
		re = min(re, sbox );
		//re = min(re, trunkBox );
		//re = min(re, SDFSphere(p, float3(0, 2, 0), 1) );
	}
	else if(inx == -2)
	{
		float terrain = 100000;
		if(abs(p.x)<300 && abs(p.z)<300)
		{
			//float re = 0;
			//float r = 0.48;// +0.05*sin(16 * p.y)*sin(16 * p.x + 10 * _Time.y)*sin(16 * p.z);
			//float dis = fbm4(p.zxy*10);
			//r += 0.02*smoothstep(0.5f, 1.0f, dis);
			//float3 center = float3(0, r, 0);

			//terrain =  5 * fbm4(float3(0.1*p.xz,0));
			//terrain = 0.1 * sin(2*PI/3.0f * dot(normalize(float2(1,0)),float2(p.x,p.z)));
			//terrain = abs(p.y - terrain);
			//terrain *= 0.5;

			//### fbm flaw effect.### 
			//###can only used for low height effect,and no sdf shadow, because trace it by height func is not right.
			//###but for low height effect, this flaw may be accepted
			//terrain -= 0.1*smoothstep(0.4f, 0.8f, fbm4(float3(p.xz+0.3,0)));

			//terrain = abs(p.y);

			//???
			//float3 np = CosFBM_NearestPoint(p, 10, 0.1f);
			//terrain = length(np-p);

			terrain = abs(p.y - CosFBM(p.xz));
			terrain *= 0.5;
		}
		re = min(re, terrain );
	}
return re;

###BLOCK

###BLOCK ObjNormal
//@@@SDFBakerMgr ObjNormal
if(inx == 0 )
{
}
else if (inx == 1 )
{
inx = -2;
}
else if (inx == 2 )
{
}
else if (inx == 3 )
{
}
else if (inx == 4 )
{
}
else if (inx == 5 )
{
}
if(inx == 0 )
{
}
else if (inx == 1 )
{
}
else if (inx == 2 )
{
inx = -2;
}
else if (inx == 3 )
{
}
else if (inx == 4 )
{
}
else if (inx == 5 )
{
}
else if (inx == 6 )
{
}
//@@@
if (inx == -2)
{//???
	float2 dxy = CosFBM_Dxy(p.xz);
	return normalize(float3(-dxy.x,1,-dxy.y));
}
else
{
	return GetObjSDFNormal(inx, p);
}
###BLOCK
